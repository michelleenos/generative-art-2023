var o=Object.defineProperty;var l=(r,t,i)=>t in r?o(r,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):r[t]=i;var u=(r,t,i)=>(l(r,typeof t!="symbol"?t+"":t,i),i);import{p as a}from"./p5.min-89a01bf6.js";class e{constructor(t=0,i=0){u(this,"x");u(this,"y");this.x=t,this.y=i}add(t,i){return typeof t=="number"?(this.x+=t,this.y+=typeof i=="number"?i:t,this):(this.x+=t.x,this.y+=t.y,this)}sub(t,i){return typeof t=="number"?(this.x-=t,this.y-=typeof i=="number"?i:t,this):(this.x-=t.x,this.y-=t.y,this)}mult(t){return t instanceof e||t instanceof a.Vector?(this.x*=t.x,this.y*=t.y,this):(this.x*=t,this.y*=t,this)}div(t){return t instanceof e||t instanceof a.Vector?t.x===0||t.y===0?this:(this.x/=t.x,this.y/=t.y,this):t===0?this:(this.x/=t,this.y/=t,this)}magSq(){return this.x*this.x+this.y*this.y}mag(){return Math.sqrt(this.magSq())}copy(){return new e(this.x,this.y)}setMag(t){return this.normalize().mult(t),this}normalize(){let t=this.mag();return t!==0&&this.mult(1/t),this}limit(t){let i=this.magSq();if(i>t*t){let s=Math.sqrt(i);this.div(s).mult(t)}return this}lerp(t,i){return this.x+=(t.x-this.x)*i,this.y+=(t.y-this.y)*i,this}}class x{constructor(t,i,s,h){this.x=t,this.y=i,this.width=s,this.height=h}contains(t,i){if(t instanceof e)return this.contains(t.x,t.y);if(Array.isArray(t)){let[s,h]=t;return s>=this.x&&s<=this.x+this.width&&h>=this.y&&h<=this.y+this.height}else if(typeof i=="number"&&typeof t=="number"){let s=t;return s>=this.x&&s<=this.x+this.width&&i>=this.y&&i<=this.y+this.height}return console.warn("Invalid arguments to Rectangle.contains()"),!1}intersects(t){return t instanceof x?this.x<t.x+t.width&&this.x+this.width>t.x&&this.y<t.y+t.height&&this.y+this.height>t.y:t.intersectsRect(this)}getRandom(t=!0){let i=Math.random()*(this.width-this.x)+this.x,s=Math.random()*(this.height-this.y)+this.y;return t?[Math.floor(i),Math.floor(s)]:[i,s]}}class m extends e{constructor(i,s,h){super(i,s);u(this,"_r");u(this,"rSquared");this._r=h,this.rSquared=h*h}get radius(){return this._r}set radius(i){this._r=i,this.rSquared=i*i}distanceFromEdge(i,s){let h=this.copy().sub(i,s).magSq();return h>this.rSquared?Math.sqrt(h)-this._r:0}contains(i,s){return Math.pow(this.x-i,2)+Math.pow(this.y-s,2)<=this.rSquared}intersectsRect(i){let s=Math.abs(this.x-i.x-i.width/2),h=Math.abs(this.y-i.y-i.height/2);if(s>i.width/2+this._r||h>i.height/2+this._r)return!1;if(s<=i.width/2||h<=i.height/2)return!0;let n=s-i.width/2,y=h-i.height/2;return n*n+y*y<=this.rSquared}getRandom(){let i=Math.random()*Math.PI*2,s=Math.random()*this._r,h=this.x+Math.cos(i)*s,n=this.y+Math.sin(i)*s;return[h,n]}}export{m as C,x as R,e as V};
