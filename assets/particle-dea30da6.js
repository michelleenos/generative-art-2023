var y=Object.defineProperty;var m=(o,h,t)=>h in o?y(o,h,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[h]=t;var r=(o,h,t)=>(m(o,typeof h!="symbol"?h+"":h,t),t);import{p as c}from"./p5.min-89a01bf6.js";import{b as n}from"./utils-410b772c.js";class v extends c.Vector{constructor(t,s,i={}){super(t,s);r(this,"radius");r(this,"acceleration",new c.Vector);r(this,"velocity");r(this,"mass");r(this,"min",5);r(this,"max",25);r(this,"edges");this.radius=i.radius??5,this.mass=i.mass??1,this.velocity=i.velInit??new c.Vector(0,0),i.edges&&(this.edges=i.edges)}applyForce(t){let s=t.copy().div(this.mass);this.acceleration.add(s)}update(){this.velocity.add(this.acceleration),this.acceleration.mult(0),this.add(this.velocity)}distFromEdge(t){if(t)return{left:this.x-this.radius,right:t.width-this.x-this.radius,top:this.y-this.radius,bottom:t.height-this.y-this.radius};if(this.edges)return{left:this.x-this.radius-this.edges.left,right:this.edges.right-this.x-this.radius,top:this.y-this.radius-this.edges.top,bottom:this.edges.bottom-this.y-this.radius};throw new Error(`No edges defined for particle: ${this}`)}checkEdges(t=-1,s){if(s){let i=this.distFromEdge(s);i.left<=0?(this.x=this.radius,this.velocity.x*=t):i.right<=0?(this.x=s.width-this.radius,this.velocity.x*=t):i.top<=0?(this.velocity.y*=t,this.y=this.radius):i.bottom<=0&&(this.velocity.y*=t,this.y=s.height-this.radius)}else if(this.edges){let i=this.distFromEdge();i.left<=0?(this.x=this.radius+this.edges.left,this.velocity.x*=t):i.right<=0?(this.x=this.edges.right-this.radius,this.velocity.x*=t):i.top<=0?(this.velocity.y*=t,this.y=this.radius+this.edges.top):i.bottom<=0&&(this.velocity.y*=t,this.y=this.edges.bottom-this.radius)}else throw new Error(`No edges defined for particle: ${this}`)}draw(t){t.circle(this.x,this.y,this.radius*2)}attract(t,{G:s=1,min:i=this.min,max:d=this.max}={}){let e=this.copy().sub(t),a=e.mag();a=n(a,i,d),e.normalize();let l=s*this.mass*t.mass/(a*a);return e.mult(l),e}repel(t,{min:s=this.min,max:i=this.max}={}){let d=this.copy().sub(t),e=d.mag();e=n(e,s,i);let a=d.normalize(),l=this.mass*t.mass/(e*e);return a.mult(l*-1)}}export{v as P};
