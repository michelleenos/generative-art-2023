var a=Object.defineProperty;var c=(d,e,t)=>e in d?a(d,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):d[e]=t;var l=(d,e,t)=>(c(d,typeof e!="symbol"?e+"":e,t),t);import{R as h}from"./trig-shapes-61ac4bbe.js";import{r as o}from"./utils-410b772c.js";const f=(d,e)=>{switch(e){case"half":return p(d);case"two-random":return g(d);case"two-thirds":return v(d);case"thirds-row":return m(d);case"quarters-grid":return R(d);case"four-random":return x(d)}},p=d=>{let{x:e,y:t,width:i,height:r}=d;return i>r?[new h(e,t,i/2,r),new h(e+i/2,t,i/2,r)]:[new h(e,t,i,r/2),new h(e,t+r/2,i,r/2)]},g=d=>{let{x:e,y:t,width:i,height:r}=d;if(i>r){let n=o(e+i*.25,e+i-i*.25);return[new h(e,t,n-e,r),new h(n,t,e+i-n,r)]}else{let n=o(t+r*.25,t+r-r*.25);return[new h(e,t,i,n-t),new h(e,n,i,t+r-n)]}},v=d=>{let{x:e,y:t,width:i,height:r}=d;if(i>r){let n=i*.3333333333333333,s=i-n;return[new h(e,t,n,r),new h(e+n,t,s,r)]}else{let n=r*.3333333333333333,s=r-n;return[new h(e,t,i,n),new h(e,t+n,i,s)]}},m=d=>{let{x:e,y:t,width:i,height:r}=d;if(i>r){let n=i/3;return[new h(e,t,n,r),new h(e+n,t,n,r),new h(e+2*n,t,n,r)]}else{let n=r/3;return[new h(e,t,i,n),new h(e,t+n,i,n),new h(e,t+2*n,i,n)]}},R=d=>{let{x:e,y:t,width:i,height:r}=d,n=i/2,s=r/2;return[new h(e,t,n,s),new h(e+n,t,n,s),new h(e,t+s,n,s),new h(e+n,t+s,n,s)]},x=d=>{let{x:e,y:t,width:i,height:r}=d,n=[o(e+i*.25,e+i-i*.25),o(t+r*.25,t+r-r*.25)],s=n[0],u=n[1];return[new h(e,t,s-e,u-t),new h(s,t,e+i-s,u-t),new h(e,u,s-e,t+r-u),new h(s,u,e+i-s,t+r-u)]};let y=0;class w{constructor(e,{depth:t=0,parent:i=null,divideRule:r="two-random"}){l(this,"bounds");l(this,"depth");l(this,"children",[]);l(this,"parent",null);l(this,"nodeId",y++);l(this,"divideRule");l(this,"getMaxDepth",()=>{let e=this.children.map(t=>t.getMaxDepth());return Math.max(this.depth,...e)});this.bounds=e,this.depth=t,this.divideRule=r,i&&(this.parent=i)}divide(){let e=this.divideRect();return e?(this.children=e.map(t=>new w(t,{depth:this.depth+1,parent:this,divideRule:this.divideRule})),!0):!1}divideRect(){return this.children.length>0?!1:f(this.bounds,this.divideRule)}collapse(){return this.children.length===0?!1:(this.children=[],!0)}findNode(e,t){if(!this.bounds.contains(e,t))return!1;if(this.children.length===0)return this;for(let i=0;i<this.children.length;i++){let n=this.children[i].findNode(e,t);if(n)return n}return!1}getLeaves(){let e=[];return this.children.length===0?e.push(this):this.children.forEach(t=>{e.push(...t.getLeaves())}),e}getAll(){let e=[];return e.push(this),this.children.forEach(t=>{e.push(...t.getAll())}),e}clear(){this.children=[]}}export{w as N};
